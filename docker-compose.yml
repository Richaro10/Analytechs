version: "3.8"

services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_STRAPI_URL: http://localhost:1337
    ports:
      - "80:80"
      - "443:443"
    environment:
      - VITE_APP_TITLE=Analytechs
      - VITE_APP_DESCRIPTION=Solutions de Business Intelligence, Data Analytics et Conseil en Management
      - VITE_DOMAIN=analytechs.tech
      - VITE_STRAPI_URL=http://localhost:1337
      - VITE_STRAPI_TOKEN=${STRAPI_TOKEN}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./frontend/certs:/etc/nginx/certs
    depends_on:
      - backend

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "1337:1337"
    env_file: .env
    environment:
      DATABASE_CLIENT: postgres
      DATABASE_HOST: db
      DATABASE_NAME: ${POSTGRES_DB}
      DATABASE_USERNAME: ${POSTGRES_USER}
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backend/config:/app/config
      - ./backend/src:/app/src
      - ./backend/package.json:/app/package.json
      - ./backend/yarn.lock:/app/yarn.lock
      - ./backend/public:/app/public
      - ./backend/public/uploads:/app/public/uploads
    depends_on:
      db:
        condition: service_healthy
    command: sh -c "sleep 10 && npm run develop"

  db:
    image: postgres:14
    restart: always
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - analytechs_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      timeout: 5s
    ports:
      - "5432:5432"

volumes:
  analytechs_postgres_data: